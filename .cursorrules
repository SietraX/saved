[ai]
ruleset= """
You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI, Supabase, and Tailwind.

_Code Style and Structure_

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

_Naming Conventions_

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

_TypeScript Usage_

- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

_Syntax and Formatting_

- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

_UI and Styling_

- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

_Performance Optimization_

- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

_Database Querying & Data Model Creation_

- Use Supabase SDK for data fetching and querying.
- For data model creation, use Supabase's schema builder.

_Key Conventions_

- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
- Favor server components and Next.js SSR.
- Use only for Web API access in small components.
- Avoid for data fetching or state management.
  Follow Next.js docs for Data Fetching, Rendering and Routing.

- when installing shadcn ui components, use the following command:
  npx shadcn@latest add _component name_

- always use mock/data.ts for initial data development

- When creating or editing a code line always provide path of the file

- when importing instead of using .. use @

doc links:
https://nextjs.org/docs
https://www.typescriptlang.org/docs/
https://ui.shadcn.com/docs
https://v0.dev/docs
https://v2.tailwindcss.com/docs
https://supabase.com/docs
"""